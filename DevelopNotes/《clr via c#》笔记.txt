值类型与引用类型：
	string是引用类型，但是由于运算符重载的结果，导致其像值类型一样赋值会产生新的内存分配。
	值类型派生于System.ValueType，引用类型直接派生于System.Object。
	值类型在栈上分配内存，而引用类型则是栈上分配容纳地址的内存，在创建实例时指向堆上分配的地址。

	String.Intern

ArrayList与List区别：
	ArrayList存储类型都是object，对类型无具体要求，因此会产生装箱拆箱的开销。
	List泛型声明就指定了类型，所以是类型安全的，没有装箱拆箱。

sealed修饰的类为密封类，类声明时可防止其他类继承此类，在方法中声明则可防止派生类重写此方法。

《CLR via C#》
is操作符（不会抛异常，如果对象引用为null，则返回false）
as操作符（检查类型，如果不是对应兼容的类型，则返回null)

命名空间别名：using a = System.XXX;(eg.)


checked/unchecked（控制溢出检查）（常见于基元类型转换时）checked会抛出OverflowException异常

值类型：结构从System.ValueType派生，枚举从System.Enum派生。	隐式密封，无法再派生。
引用类型：从System.Object派生。	

装箱与拆箱：
	装箱：值类型转换成引用类型时需要装箱。（托管堆分配内存，值类型字段复制到托管堆内，返回引用对象）
	拆箱：引用类型显式转换为值类型

同一性（两个引用指向同一个对象），使用Object.ReferenceEquals。相等性：检查值具体是否相等。
dynamic（动态类型，类似System.Object，简化很多代码写法，运行时再判定，类型不匹配时会报异常）

成员可访问性：嵌套类型中的方法可访问外部类型的成员；接口类型成员无需指定，编译器会自动加上public（CLR要求）
静态类：不需要实例化的类。全都是静态成员
partial：（分部类、结构和接口）。多用于拆分代码功能，在有自动生成和手写代码的类特别有用。分部方法只能是void返回类型，参数不能带out
readonly字段只能由构造器初始化
字段在声明的地方直接赋值，称为内联初始化（对象构造顺序：1内联，2基类，3自身）
值类型不会自动调用构造器，需要显示调用。（实际上不能给值类型定义无参构造器，但可以调用。。）
类型构造器：无参构造器前加static，在该类型首次被构造时先调用

扩展方法：语法：在方法的参数声明第一个类型参数前面加this，这样该静态方法就变成第一个参数所属类型的扩展方法了。并且支持派生类调用
params：方法可变数量的参数数组，关键字。只能放在方法的参数声明的最后

HashSet<T>（便于检索，不会重复。比List<T>快）
泛型：参数（不变量，逆变量（in关键字，表示可以转换为声明类型的派生类型），协变量（out关键字，表示可以转换为声明类型的基类）
	构造器约束（where T : new ())表示，T实现了无参构造器

Base64：一种编码。将8bit字节转换为可打印的字符。3个8bit字符转换成4个6bit，每个6bit前用00补位。再对应base64的字符。产生转码后的字符串。不足3个8bit的情况下，后面补=号。

委托：调用GetInvocationList()方法（定义在MulticastDelegate，委托的基类），可以获得委托链的所有方法。便于自己处理（比如返回值，只有最后一个委托会有返回值的问题）
	MethodInfo.CreateDelegate（Type delegateType）创建委托。然后委托调用DynamicInvoke来调用自己的委托方法。


